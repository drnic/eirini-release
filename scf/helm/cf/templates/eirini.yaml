---
apiVersion: v1
kind: Namespace
metadata:
  name: {{ .Values.opi.namespace }}

# Deployment
---
apiVersion: apps/v1beta2
kind: Deployment
metadata:
  name: "eirini"
spec:
  replicas: 1
  selector:
    matchLabels:
      name: "eirini"
  template:
    metadata:
      labels:
        name: "eirini"
    spec:
      dnsPolicy: "ClusterFirst"
      serviceAccountName: "opi"
      volumes:
        - name: config-map-volume
          configMap:
            name: "eirini"
            items:
            - key: opi.yaml
              path: opi.yml
        - name: config-volume
          emptyDir: {}
        - name: registry-cert
          secret:
            secretName: private-registry-cert
      initContainers:
      - name: configure-opi-yaml
        image: eirini/opi-init:new-scf
        volumeMounts:
        - name: config-map-volume
          mountPath: /configs
        - name: config-volume
          mountPath: /output
          readOnly: false
      containers:
      - name: opi
        image: eirini/opi:new-scf
        imagePullPolicy: Always
        volumeMounts:
        - name: config-volume
          mountPath: /workspace/jobs/opi/config
        ports:
        - containerPort: 8085
      - name: registry
        image: eirini/registry
        imagePullPolicy: Always
        restartPolicy: OnFailure
        ports:
        - containerPort: 8080
        volumeMounts:
        - name: registry-cert
          mountPath: /workspace/jobs/certs

# ConfigMap
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: "eirini"
data:
  opi.yaml: |
    opi:
      kube_config: ""
      kube_namespace: {{ .Values.opi.namespace }}
      kube_endpoint: {{ .Values.opi.ingress_endpoint }}
      nats_password: {{ .Values.secrets.NATS_PASSWORD }}
      nats_ip: "nats-nats.scf.svc.cluster.local"
      api_endpoint: "http://api-cloud-controller-ng.{{ .Release.Namespace }}.svc.cluster.local:9022"
      cf_username: "admin"
      cc_certs_secret_name: "secrets-{{ .Chart.Version }}-{{ .Values.kube.secrets_generation_counter }}"
      cf_password: {{ .Values.secrets.CLUSTER_ADMIN_PASSWORD }}
      external_eirini_address: {{ if .Values.opi.use_ingress }}"we-love-pandas.{{ .Values.opi.ingress_endpoint }}:443"{{ else }}"{{ index .Values.kube.external_ips 0 }}:5800"{{ end }}
      eirini_address: "http://eirini-opi.{{ .Release.Namespace }}.svc.cluster.local:8085"
      skip_ssl_validation: true
      insecure_skip_verify: true

# Service
---
apiVersion: v1
kind: Service
metadata:
  name: "eirini-opi"
spec:
{{- if not .Values.opi.use_ingress }}
  externalIPs: {{ .Values.kube.external_ips | toJson }}
{{- end }}
  ports:
    - port: 8085
      protocol: TCP
      name: opi
    - port: {{ if .Values.opi.use_ingress }}8080{{ else }}5800{{ end }}
      protocol: TCP
      targetPort: {{ if .Values.opi.use_ingress }}8080{{ else }}8081{{ end }}
      name: registry
  selector:
    name: "eirini"


# Ingress
{{- if .Values.opi.use_ingress }}
---
apiVersion: extensions/v1beta1
kind: Ingress
metadata:
  name: eirini-registry
  labels:
    release: {{ .Release.Name }}
    heritage: {{ .Release.Service }}
spec:
  tls:
    - hosts:
      - "we-love-pandas.{{ .Values.opi.ingress_endpoint }}"
      secretName: private-registry-cert
  rules:
    - host: "we-love-pandas.{{ .Values.opi.ingress_endpoint }}"
      http:
        paths:
          - path: /
            backend:
              serviceName: eirini-opi
              servicePort: 8080
{{- end }}

# Service Account
---
apiVersion: v1
kind: ServiceAccount
metadata:
  name: opi
  namespace: {{ .Release.Namespace }}
---
apiVersion: rbac.authorization.k8s.io/v1beta1
kind: ClusterRoleBinding
metadata:
  name: opi-clust-admin-binding
subjects:
  - kind: ServiceAccount
    name: opi
    namespace: {{ .Release.Namespace }}
roleRef:
  kind: ClusterRole
  name: cluster-admin
  apiGroup: rbac.authorization.k8s.io

# create-certs
---
kind: Job
apiVersion: batch/v1
metadata:
  name: create-certs
spec:
  template:
    metadata:
      name: create-certs
    spec:
      serviceAccountName: "opi"
      restartPolicy: OnFailure
      containers:
      - name: create-certs
        env:
        - name: REGISTRY
          value: {{ if .Values.opi.use_ingress }}"we-love-pandas.{{ .Values.opi.ingress_endpoint }}"{{ else }}"{{ index .Values.kube.external_ips 0 }}"{{ end }}
        image: eirini/certs-generate
        imagePullPolicy: Always

# copy-certs
---
apiVersion: batch/v1
kind: Job
metadata:
  name: cert-copier
spec:
  template:
    spec:
      serviceAccountName: "opi"
      restartPolicy: OnFailure
      volumes:
      - name: host-docker
        hostPath:
          path: /etc/docker
          type: Directory
      containers:
      - name: copy-certs
        env:
        - name: REGISTRY
          value: {{ if .Values.opi.use_ingress }}"we-love-pandas.{{ .Values.opi.ingress_endpoint }}:443"{{ else }}"{{ index .Values.kube.external_ips 0 }}:5800"{{ end }}
        image: eirini/certs-copy
        volumeMounts:
        - name: host-docker
          mountPath: /workspace/docker


---
apiVersion: batch/v1
kind: Job
metadata:
  name: secret-smuggler
spec:
  template:
    spec:
      serviceAccountName: "opi"
      restartPolicy: OnFailure
      containers:
      - name: smuggle
        image: dtzar/helm-kubectl
        command:
        - "/bin/bash"
        - "-c"
        - "--"
        args:
        - "kubectl get secret secrets-{{ .Chart.Version }}-{{ .Values.kube.secrets_generation_counter }} --namespace={{ .Release.Namespace }} --export -o yaml | kubectl apply --namespace={{ .Values.opi.namespace }} -f -"
